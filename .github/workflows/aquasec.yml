name: build
on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main
    types:
      - opened
      
jobs:
  checkout:
    name: Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      # - name: Setup pipeline enforcer
        # uses: aquasecurity/pipeline-enforcer-action@main
        # with:
          # aqua-key: ${{ secrets.AQUA_KEY }}
          # aqua-secret: ${{ secrets.AQUA_SECRET }}

      - name: List files
        run:  pwd &&
              ls -l . &&
              ls -l / &&
              git config --global --add safe.directory /github/workspace

      # Aqua Registry login
      - name: Login to Aqua Registry
        uses: docker/login-action@v1
        with:
          registry: registry.aquasec.com
          username: ${{ secrets.AQUADEV_USERNAME }}
          password: ${{ secrets.AQUADEV_PASS }}
      
      # - name: Aqua code scanning (SCA,IaC and SAST)
        # uses: docker://aquasec/aqua-scanner
        # with:
          # # args: trivy fs --scanners misconfig,vuln,secret --sast .
         # args: trivy fs --sast --reachability --scanners misconfig,vuln,secret --db-repository=registry.aquasec.com/trivy-db:2 --checks-bundle-repository=registry.aquasec.com/trivy-checks:1 --java-db-repository=registry.aquasec.com/trivy-java-db:1 /github/workspace
          
          # # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          # # To enable SAST scanning, add: --sast
          # # To enable reachability scanning, add: --reachability
          # # To enable npm/dotnet/gradle non-lock file scanning, add: --package-json / --dotnet-proj / --gradle
        # env:
          # ENABLE_TRIVY_STDOUT: 'true'
          # TRIVY_USERNAME: ${{ secrets.AQUADEV_USERNAME }}
          # TRIVY_PASSWORD: ${{ secrets.AQUADEV_PASS }}
          # AQUA_KEY: ${{ secrets.AQUA_KEY }}
          # AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
          # GITHUB_TOKEN: ${{ github.token }}
          # AQUA_URL: https://api.eu-1.supply-chain.cloud.aquasec.com
          # CSPM_URL: https://eu-1.api.cloudsploit.com
          # TRIVY_RUN_AS_PLUGIN: 'aqua'
          # # For http/https proxy configuration add env vars: HTTP_PROXY/HTTPS_PROXY, CA-CRET (path to CA certificate)
      
      # Runs docker build 
      - name: Build docker image
        run: |
          echo "TAG=${{ github.sha }}" >> $GITHUB_ENV
          # docker build -t aquasupportemea/insecure-bank-app:${{ github.sha }} .
          docker build -t aquasupportemea/insecure-bank-app:${{ env.TAG }} .
          docker image list
          id
        
      
      - name: SBOM Generation / Manifest Generation
        run: |
          export BILLY_SERVER=https://billy.eu-1.codesec.aquasec.com
          curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
          curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
          if ! cat install.sh.checksum | sha256sum --check; then
          echo "install.sh checksum failed"
          exit 1
          fi
          BINDIR="." sh install.sh
          rm install.sh install.sh.checksum

          docker image list
          id
          pwd &&
              ls -l . &&
              ls -l / &&
              git config --global --add safe.directory /github/workspace

          ./billy generate \
            --access-token "${{ secrets.GITHUB_TOKEN }}" \
            --aqua-key "${{ secrets.AQUA_KEY }}" \
            --aqua-secret "${{ secrets.AQUA_SECRET }}" \
            --cspm-url https://eu-1.api.cloudsploit.com \
            # --artifact-path "my-image-name:${{ env.tag-version }}" 
            # --artifact-path "aquasupportemea/insecure-bank-app:${{ github.sha }}"
            --artifact-path "aquasupportemea/insecure-bank-app:${{ env.TAG }}"
            # --artifact-path .

            # The docker image name:tag of the newly built image
            # --artifact-path "my-image-name:${{ env.tag-version }}" 
            # OR the path to the root folder of your project. I.e my-repo/my-app 
            # --artifact-path "${{env.MY_APP_ROOT}}"

      # # Scan the Image
      # - name: Image scanning with the Aqua Image Scanner
        # run: |
          # docker run --rm -v /var/run/docker.sock:/var/run/docker.sock registry.aquasec.com/scanner:2022.4 scan --host ${{ secrets.AQUA_HOST }} --local aquasupportemea/insecure-bank-app:${{ github.sha }} --token ${{ secrets.AQUA_TOKEN }} --layer-vulnerabilities --no-verify --html > .github/workflows/scan-output.html
          
      # - name: Login to DockerHub
        # uses: docker/login-action@v2
        # with:
          # username: ${{ secrets.DOCKERHUB_USERNAME }}
          # password: ${{ secrets.DOCKERHUB_PASSWORD }}

     # # Runs docker push 
      # - name: Docker Image Push
        # run: sudo docker push aquasupportemea/insecure-bank-app:${{ github.sha }}  
          
